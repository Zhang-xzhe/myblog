(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{613:function(t,e,a){"use strict";a.r(e);var n=a(13),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://docs.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.dbcontext?view=efcore-6.0",target:"_blank",rel:"noopener noreferrer"}},[t._v("DbContext"),a("OutboundLink")],1),t._v(" 可用于简化程序与数据库的交互，可通过"),a("code",[t._v("Nuget")]),t._v("搜索"),a("code",[t._v("[Microsoft.EntityFrameworkCore]")]),t._v("下载使用。"),a("code",[t._v("DbContext")]),t._v("相当于数据库实例，"),a("code",[t._v("DbSet")]),t._v("相当于数据库中的表。实际应用中，用户应继承"),a("code",[t._v("DbContext类")]),t._v("实现自己的子类，在子类中为每个数据实体添加"),a("code",[t._v("DbSet")]),t._v("属性。若这些属性的"),a("code",[t._v("Setter")]),t._v("权限为"),a("code",[t._v("public")]),t._v("，那么当"),a("code",[t._v("DbContext")]),t._v("实例被创建时，这些属性均会被初始化。")]),t._v(" "),a("h2",{attrs:{id:"环境搭建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境搭建"}},[t._v("#")]),t._v(" 环境搭建")]),t._v(" "),a("p",[t._v("使用前需要使用 "),a("code",[t._v("Nuget")]),t._v(" 安装如下包")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://imagebed.krins.cloud/api/image/1648247213378.jpg",alt:"image-20220325205205858"}})]),t._v(" "),a("h2",{attrs:{id:"创建数据库上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建数据库上下文"}},[t._v("#")]),t._v(" 创建数据库上下文")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("在工程目录下创建"),a("code",[t._v("Model")]),t._v("文件夹，用于存放数据实体和数据库上下文")])]),t._v(" "),a("li",[a("p",[t._v("选中"),a("code",[t._v("Model")]),t._v("文件夹，右键添加 ----\x3e 类（建议类名以"),a("code",[t._v("DbContext")]),t._v("结尾）")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://xg3.jiashumao.net/2022/03/05/wWIr5HYg.png",alt:"image-20220305002112066"}})])]),t._v(" "),a("li",[a("p",[t._v("添加构造函数，根据实际情况添加"),a("code",[t._v("DbSet")]),t._v("属性")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://xg3.jiashumao.net/2022/03/05/SCe2v9IZ.png",alt:"image-20220305002306473"}})])])]),t._v(" "),a("p",[t._v("​\t\t以上图为例，该上下文包含一个"),a("code",[t._v("DbSet<User>")]),t._v("类型的属性且属性名为"),a("code",[t._v("Users")]),t._v("，则 EF 框架将默认在数据库中查找 "),a("code",[t._v("Users")]),t._v(" 表。")]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[a("p",[t._v("重写"),a("code",[t._v("OnConfiguring")]),t._v("方法，连接数据库（以SQL Server为例）")]),t._v(" "),a("div",{staticClass:"language-c# extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// TrustServerCertificate属性为True表示让SQL Server信任HTTPS连接\nstring connectStr = "Data Source=[server_instance];Initial Catalog=[database_name];User ID=[username];Pwd=[password];TrustServerCertificate=true";\nprotected override void OnConfiguring(DbContextOptionsBuilder opt)\n{\n    opt.UseSqlServer(connectStr);\n}\n')])])])]),t._v(" "),a("li",[a("p",[t._v("在"),a("code",[t._v("Program.cs")]),t._v("文件中注册"),a("code",[t._v("DbContext")]),t._v("服务")]),t._v(" "),a("div",{staticClass:"language-c# extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("/// <summary>\n/// 向容器中注入服务\n/// </summary>\nbuilder.Services.AddDbContext<OurDbContext>();\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"操作数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作数据库"}},[t._v("#")]),t._v(" 操作数据库")]),t._v(" "),a("p",[t._v("在上一步中我们知道了如何使用"),a("code",[t._v("DbContext")]),t._v("连接数据库，下面介绍如何对数据库中的表进行增、删、查、改操作。由于一个数据库中通常包含若干个表，每个表对应着一个数据实体，每个实体的操作往往是不同的。因此，我建议在"),a("code",[t._v("DbContext")]),t._v("子类的命名空间中，分别为每个实体创建类，以用于数据库操作。")]),t._v(" "),a("div",{staticClass:"language-c# extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("namespace Model\n{\n\tpublic class OurDbContext : DbContext\n    {\n        // ...\n    \n        // 映射数据库中的表\n        public DbSet<UserEntity>? Users { get; set; }               // 用户表\n        public DbSet<AccessEntity>? Accesses { get; set; }          // 出入登记表\n    }\n\n\n    /// <summary>\n    /// 用户表相关操作\n    /// </summary>\n    public class SQLUserData\n    {\n    }\n    \n    \n    /// <summary>\n    /// 出入登记表相关操作\n    /// </summary>\n    public class SQLAccessData\n    {\n    }\n}\n")])])]),a("h3",{attrs:{id:"初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[t._v("#")]),t._v(" 初始化")]),t._v(" "),a("p",[t._v("想要操作数据库中的表，需要分两步完成：")]),t._v(" "),a("ol",[a("li",[t._v("获取数据库实例")]),t._v(" "),a("li",[t._v("获取数据库中表的实例")])]),t._v(" "),a("p",[t._v("下面以"),a("code",[t._v("Users")]),t._v("表为例，演示如何获取数据库中表的实例")]),t._v(" "),a("div",{staticClass:"language-c# extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("/// <summary>\n/// 用户表相关操作\n/// </summary>\npublic class SQLUserData\n{\n    // OutDbContext为之前创建的数据库上下文\n    private OurDbContext? _context { get; set; }\n    public SQLUserData(OurDbContext context)\n    {\n        _context = context;\n    } \n}\n\n\npublic class Test\n{\n\tpublic void InitSQLUserData()\n    {\n        // 使用using后，系统会在合适的时机释放连接资源\n    \tusing var context = new OurDbContext();   \n        SQLUserData sqlUserData = new SQLUserData(context);\n        \n        // 增、删、查、改\n        // ...\n    }    \n}\n")])])]),a("h3",{attrs:{id:"增删查改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#增删查改"}},[t._v("#")]),t._v(" 增删查改")]),t._v(" "),a("p",[t._v("下面以"),a("code",[t._v("Users")]),t._v("表为例，演示如何执行增删查改操作")]),t._v(" "),a("div",{staticClass:"language-c# extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('/// <summary>\n/// 用户表相关操作\n/// </summary>\npublic class SQLUserData\n{\n    // OutDbContext为之前创建的数据库上下文\n    private OurDbContext? _context { get; set; }\n    public SQLUserData(OurDbContext context)\n    {\n        _context = context;\n    } \n    \n    /// <summary>\n    /// 添加用户\n    /// </summary>\n    /// <param name="user"></param>\n    public void Add(UserEntity user)\n    {\n        // 添加完成后务必要保存\n        _context?.Add(user);\n        _context?.SaveChanges();\n    }\n\n\n    /// <summary>\n    /// 获取用户列表\n    /// </summary>\n    /// <returns></returns>\n    public IEnumerable<UserEntity>? Get()\n    {\n        return _context?.Users?.ToList();\n    }\n\n\n    /// <summary>\n    /// 根据ID获取用户\n    /// </summary>\n    /// <param name="id"></param>\n    /// <returns></returns>\n    public UserEntity? Get(string id)\n    {\n        return _context?.Users?.FirstOrDefault(u => u.Id == id);\n    }\n}\n')])])]),a("h2",{attrs:{id:"注意"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[t._v("#")]),t._v(" 注意")]),t._v(" "),a("h3",{attrs:{id:"并行执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并行执行"}},[t._v("#")]),t._v(" 并行执行")]),t._v(" "),a("p",[a("code",[t._v("Entity Framework Core")]),t._v("对于同一个"),a("code",[t._v("DbContext实例")]),t._v("不支持并行执行，例如")]),t._v(" "),a("ul",[a("li",[t._v("异步查询的并行调用")]),t._v(" "),a("li",[t._v("不同线程对"),a("code",[t._v("DbContext实例")]),t._v("的明确并行调用")])]),t._v(" "),a("p",[t._v("可通过下列方法避免问题")]),t._v(" "),a("ul",[a("li",[t._v("执行"),a("code",[t._v("async")]),t._v("调用时，立即使用"),a("code",[t._v("await")])]),t._v(" "),a("li",[t._v("每次操作均使用不同的"),a("code",[t._v("DbContext实例")])])]),t._v(" "),a("h3",{attrs:{id:"主键"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主键"}},[t._v("#")]),t._v(" 主键")]),t._v(" "),a("p",[t._v("我们知道，数据库表对应着一个 "),a("code",[t._v("实体")]),t._v("，"),a("code",[t._v("EF框架")]),t._v(" 要求实体必须设置 "),a("code",[t._v("主键")]),t._v("。默认情况下，"),a("code",[t._v("EF框架")]),t._v(" 将实体中名为 "),a("code",[t._v("Id")]),t._v(" 的变量作为主键，若实体中不包含名为 "),a("code",[t._v("Id")]),t._v(" 的属性或想要设置其它属性为 "),a("code",[t._v("主键")]),t._v("，则需要使用特性 "),a("code",[t._v("Key")]),t._v(" 指定。")]),t._v(" "),a("div",{staticClass:"language-Java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("using "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ComponentModel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DataAnnotations")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" string _pwd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" string "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pwd")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    get "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" _pwd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    set "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" _pwd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);