(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{583:function(t,_,v){"use strict";v.r(_);var e=v(13),a=Object(e.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"_1-关键字"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-关键字"}},[t._v("#")]),t._v(" 1 关键字")]),t._v(" "),v("h2",{attrs:{id:"_1-1-一览表"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-一览表"}},[t._v("#")]),t._v(" 1.1 一览表")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://s2.loli.net/2022/01/02/LWsi4ZPV2RMQo1f.png",alt:"image-20220102233838783"}})]),t._v(" "),v("p",[v("img",{attrs:{src:"https://s2.loli.net/2022/01/02/al9XQpYkq1Fnyv6.png",alt:"image-20220102233852488"}})]),t._v(" "),v("h2",{attrs:{id:"_1-2-前缀"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-前缀"}},[t._v("#")]),t._v(" 1.2 前缀")]),t._v(" "),v("p",[v("code",[t._v("C#")]),t._v("中的前缀包括"),v("code",[t._v("public")]),t._v("、"),v("code",[t._v("private")]),t._v("、"),v("code",[t._v("abstract")]),t._v("等等，其主要分为"),v("code",[t._v("权限类")]),t._v("和"),v("code",[t._v("功能类")]),t._v("。")]),t._v(" "),v("ul",[v("li",[v("p",[v("code",[t._v("权限类")]),t._v("：声明属性或方法的权限，限定其使用范围")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("功能类")]),t._v("：实现某种特定功能")])])]),t._v(" "),v("p",[v("strong",[t._v("权限类")])]),t._v(" "),v("ul",[v("li",[v("p",[v("code",[t._v("public")]),t._v("：对访问成员==没有级别限制==")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("private")]),t._v("：只能在==类的内部==访问")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("protected")]),t._v("：在==类的内部==或者在==派生类==中访问，不管该类和派生类是不是在同一程序集中")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("internal")]),t._v("：只能在==同一程序集(Assembly)==中访问")])])]),t._v(" "),v("p",[v("strong",[t._v("功能类")])]),t._v(" "),v("ul",[v("li",[v("code",[t._v("virtual")]),t._v("和"),v("code",[t._v("override")]),t._v("：用于子类重写父类方法")]),t._v(" "),v("li",[v("code",[t._v("abstract")]),t._v("：使用abstract修饰的类不能实例化，可以暂时不实现接口，等待子类实现")])]),t._v(" "),v("h1",{attrs:{id:"_2-数据类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据类型"}},[t._v("#")]),t._v(" 2 数据类型")]),t._v(" "),v("p",[v("code",[t._v("C#")]),t._v("中的数据类型关系如下")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://s2.loli.net/2022/01/03/uwMPznVt2oh9RiD.png",alt:"image-20220103122510090"}})]),t._v(" "),v("h2",{attrs:{id:"_2-1-值类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-值类型"}},[t._v("#")]),t._v(" 2.1 值类型")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://s2.loli.net/2022/01/03/hwKjfaEiCYOFL81.png",alt:"image-20220103120659991"}})]),t._v(" "),v("h2",{attrs:{id:"_2-2-引用类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-引用类型"}},[t._v("#")]),t._v(" 2.2 引用类型")]),t._v(" "),v("p",[v("strong",[t._v("object 类型")])]),t._v(" "),v("ul",[v("li",[t._v("可以被分配给任何类型，但在分配值之前需要进行类型转换")]),t._v(" "),v("li",[t._v("值类型转换为对象类型时称为"),v("code",[t._v("装箱")]),t._v("，对象类型转换为值类型时称为"),v("code",[t._v("拆箱")])])]),t._v(" "),v("div",{staticClass:"language-C# extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("object obj;\n\n// 装箱\nobj = 100; \n")])])]),v("p",[v("strong",[t._v("dynamic 类型")])]),t._v(" "),v("ul",[v("li",[t._v("可存储任何类型的数据在"),v("code",[t._v("dynamic")]),t._v("类型变量中，类型的检查发生在运行过程中")]),t._v(" "),v("li",[t._v("对象类型的检查发生在编译过程中")])]),t._v(" "),v("div",{staticClass:"language-C# extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("dynamic d = 99;\n")])])]),v("p",[v("strong",[t._v("String 类型")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("派生自"),v("code",[t._v("Object")]),t._v("类型")])]),t._v(" "),v("li",[v("p",[t._v("可将任何字符串的值赋给"),v("code",[t._v("String")]),t._v("类型变量，赋值方式包括"),v("code",[t._v("@")]),t._v("和"),v("code",[t._v("“”")])]),t._v(" "),v("ul",[v("li",[v("code",[t._v("@")]),t._v("：编译器将转义符号当作普通字符处理，任意空格、换行、缩进都计算在内")]),t._v(" "),v("li",[v("code",[t._v('""')]),t._v("：对特殊符号进行转义")])])])]),t._v(" "),v("div",{staticClass:"language-C# extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v('String str1 = "C:\\\\Windows";\nString str2 = @"C:\\Windows"\n')])])]),v("h2",{attrs:{id:"_2-3-指针类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-指针类型"}},[t._v("#")]),t._v(" 2.3 指针类型")]),t._v(" "),v("ul",[v("li",[t._v("存储另一种类型的地址")]),t._v(" "),v("li",[t._v("与"),v("code",[t._v("C")]),t._v("和"),v("code",[t._v("C++")]),t._v("中的指针功能一致")])]),t._v(" "),v("div",{staticClass:"language-C# extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("char* ptr1;\nint* ptr2;\n")])])]),v("h2",{attrs:{id:"_2-4-可空类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-可空类型"}},[t._v("#")]),t._v(" 2.4 可空类型")]),t._v(" "),v("p",[t._v("可空类型是指除了除了存储正常的数据范围，变量还可以存储"),v("code",[t._v("null")]),t._v("，包括某些不能赋值"),v("code",[t._v("null")]),t._v("的类型如"),v("code",[t._v("int")]),t._v("、"),v("code",[t._v("double")]),t._v("，定义可空类型有两种方法")]),t._v(" "),v("div",{staticClass:"language-C# extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("// 方法1\n<var_type>? <var_name> = var_value;\n\n// 方法2\nNullable<<var_type>> <var_name> = new Nullable<<var_type>>(var_value);\n")])])]),v("p",[v("code",[t._v("可空类型")]),t._v("和"),v("code",[t._v("不可空类型")]),t._v("间可能相互赋值，若把存储"),v("code",[t._v("null")]),t._v("的"),v("code",[t._v("可空类型")]),t._v("赋值给"),v("code",[t._v("不可空类型")]),t._v("便会报错。为此，有必要为"),v("code",[t._v("不可空变量")]),t._v("保留一个预设值")]),t._v(" "),v("div",{staticClass:"language-c# extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("// 若 n1 为 null 则把 preSet_value 赋给 n2，否则把 n1 赋给 n2\nint? n1 = null;\nint  n2;\n\nn2 = n1 ?? preSet_value;\n\n// 相当于\nif(n1 == null){\n    n2 = preSet_value;\n}\n\nelse{\n    n2 = n1;\n}\n")])])]),v("h2",{attrs:{id:"_2-5-值类型-vs-引用类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-值类型-vs-引用类型"}},[t._v("#")]),t._v(" 2.5 值类型 VS 引用类型")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("struct")]),t._v("是值类型，"),v("code",[t._v("class")]),t._v("是引用类型")]),t._v(" "),v("li",[v("code",[t._v("struct")]),t._v("直接在"),v("code",[t._v("栈")]),t._v("中分配内存，"),v("code",[t._v("class")]),t._v("直接在"),v("code",[t._v("堆")]),t._v("中分配内存")]),t._v(" "),v("li",[v("code",[t._v("栈")]),t._v("中的内存，会在函数调用完成后自动回收；堆中的内存由"),v("code",[t._v("C#")]),t._v("运行时自动回收"),v("code",[t._v("(GC)")])]),t._v(" "),v("li",[t._v("函数调用过程中，"),v("code",[t._v("class")]),t._v("拷贝只是拷贝"),v("code",[t._v("地址(浅拷贝)")]),t._v("，"),v("code",[t._v("struct")]),t._v("拷贝是"),v("code",[t._v("所有数据")]),t._v("都拷贝"),v("code",[t._v("(深拷贝)")])])]),t._v(" "),v("h2",{attrs:{id:"_2-6-类型转换"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-类型转换"}},[t._v("#")]),t._v(" 2.6 类型转换")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://s2.loli.net/2022/01/03/zJOA23DFhInBcp1.png",alt:"image-20220103185853144"}})]),t._v(" "),v("ul",[v("li",[t._v("内置的类型转换方法如下，推荐使用"),v("code",[t._v("Convert")]),t._v("中的这些内部转换方法")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://s2.loli.net/2022/01/03/KLxmUCsVSXelwRo.png",alt:"image-20220103190018228"}})]),t._v(" "),v("p",[v("img",{attrs:{src:"https://s2.loli.net/2022/01/03/OaRQudsl6nXcqor.png",alt:"image-20220103190044651"}})]),t._v(" "),v("ul",[v("li",[t._v("举例")])]),t._v(" "),v("div",{staticClass:"language-c# extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v('double d = 3.1415926;\n\n// 在变量前加转换后的类型\nint i = (int)d;\nConsole.WriteLine("[i]" + i);\n\n// 调用内部类型转换方法，可能无法完成某些转换\nConsole.WriteLine(i.ToString());\n\n// 调用Convert中的内部转换方法(推荐)!!!!!!!!!!!\nConsole.WriteLine(Convert.ToBoolean(i));\n')])])])])}),[],!1,null,null,null);_.default=a.exports}}]);