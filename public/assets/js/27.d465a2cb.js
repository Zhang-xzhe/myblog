(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{590:function(t,n,a){"use strict";a.r(n);var _=a(13),s=Object(_.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("C++程序在执行时，将内存大方向划分为"),a("strong",[t._v("4个区域")])]),t._v(" "),a("ul",[a("li",[t._v("代码区：存放函数体的二进制代码，由操作系统进行管理的")]),t._v(" "),a("li",[t._v("全局区：存放全局变量和静态变量以及常量")]),t._v(" "),a("li",[t._v("栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等")]),t._v(" "),a("li",[t._v("堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收")])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://imagebed.krins.cloud/api/image/1647904319453.png",alt:"image-20211111195637999"}})]),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"内存四区意义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存四区意义"}},[t._v("#")]),t._v(" "),a("strong",[t._v("内存四区意义")])]),t._v(" "),a("p",[t._v("不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程")]),t._v(" "),a("br"),t._v(" "),a("h1",{attrs:{id:"_1-程序运行前"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-程序运行前"}},[t._v("#")]),t._v(" 1 程序运行前")]),t._v(" "),a("p",[t._v("​\t在程序编译后，生成了exe可执行程序，"),a("strong",[t._v("未执行该程序前")]),t._v("分为两个区域")]),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"代码区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码区"}},[t._v("#")]),t._v(" "),a("strong",[t._v("代码区")])]),t._v(" "),a("p",[t._v("​\t\t存放 CPU 执行的机器指令")]),t._v(" "),a("p",[t._v("​\t\t代码区是"),a("strong",[t._v("共享")]),t._v("的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可")]),t._v(" "),a("p",[t._v("​\t\t代码区是"),a("strong",[t._v("只读")]),t._v("的，使其只读的原因是防止程序意外地修改了它的指令")]),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"全局区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局区"}},[t._v("#")]),t._v(" "),a("strong",[t._v("全局区")])]),t._v(" "),a("p",[t._v("​\t\t全局变量和静态变量存放在此.")]),t._v(" "),a("p",[t._v("​\t\t全局区还包含了常量区, 字符串常量和其他常量也存放在此.")]),t._v(" "),a("p",[t._v("​\t\t==该区域的数据在程序结束后由操作系统释放==")]),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" "),a("strong",[t._v("示例")])]),t._v(" "),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('//全局变量\nint g_a = 10;\nint g_b = 10;\n\n//全局常量\nconst int c_g_a = 10;\nconst int c_g_b = 10;\n\nint main() {\n\n\t//局部变量\n\tint a = 10;\n\tint b = 10;\n\n\t//打印地址\n\tcout << "局部变量a地址为： " << (int)&a << endl;\n\tcout << "局部变量b地址为： " << (int)&b << endl;\n\n\tcout << "全局变量g_a地址为： " <<  (int)&g_a << endl;\n\tcout << "全局变量g_b地址为： " <<  (int)&g_b << endl;\n\n\t//静态变量\n\tstatic int s_a = 10;\n\tstatic int s_b = 10;\n\n\tcout << "静态变量s_a地址为： " << (int)&s_a << endl;\n\tcout << "静态变量s_b地址为： " << (int)&s_b << endl;\n\n\tcout << "字符串常量地址为： " << (int)&"hello world" << endl;\n\tcout << "字符串常量地址为： " << (int)&"hello world1" << endl;\n\n\tcout << "全局常量c_g_a地址为： " << (int)&c_g_a << endl;\n\tcout << "全局常量c_g_b地址为： " << (int)&c_g_b << endl;\n\n\tconst int c_l_a = 10;\n\tconst int c_l_b = 10;\n\tcout << "局部常量c_l_a地址为： " << (int)&c_l_a << endl;\n\tcout << "局部常量c_l_b地址为： " << (int)&c_l_b << endl;\n\n\tsystem("pause");\n\n\treturn 0;\n}\n')])])]),a("br"),t._v(" "),a("h1",{attrs:{id:"_2-程序运行后"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-程序运行后"}},[t._v("#")]),t._v(" 2 程序运行后")]),t._v(" "),a("h2",{attrs:{id:"栈区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈区"}},[t._v("#")]),t._v(" "),a("strong",[t._v("栈区")])]),t._v(" "),a("p",[t._v("​\t\t由编译器自动分配释放, 存放函数的参数值,局部变量等")]),t._v(" "),a("p",[t._v("​\t\t注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放")]),t._v(" "),a("br"),t._v(" "),a("h3",{attrs:{id:"示例-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例-2"}},[t._v("#")]),t._v(" "),a("strong",[t._v("示例")])]),t._v(" "),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('int * func()\n{\n\tint a = 10;\n\treturn &a;\n}\n\nint main() {\n\n\tint *p = func();\n\n\tcout << *p << endl;\n\tcout << *p << endl;\n\n\tsystem("pause");\n\n\treturn 0;\n}\n')])])]),a("br"),t._v(" "),a("h2",{attrs:{id:"堆区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆区"}},[t._v("#")]),t._v(" "),a("strong",[t._v("堆区")])]),t._v(" "),a("p",[t._v("​\t\t由程序员分配释放,若程序员不释放,程序结束时由操作系统回收")]),t._v(" "),a("p",[t._v("​\t\t在C++中主要利用new在堆区开辟内存")]),t._v(" "),a("br"),t._v(" "),a("h3",{attrs:{id:"示例-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例-3"}},[t._v("#")]),t._v(" "),a("strong",[t._v("示例")])]),t._v(" "),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('int* func()\n{\n\tint* a = new int(10);\n\treturn a;\n}\n\nint main() {\n\n\tint *p = func();\n\n\tcout << *p << endl;\n\tcout << *p << endl;\n    \n\tsystem("pause");\n\n\treturn 0;\n}\n')])])]),a("br"),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" "),a("strong",[t._v("总结")])]),t._v(" "),a("p",[t._v("堆区数据由程序员管理开辟和释放")]),t._v(" "),a("p",[t._v("堆区数据利用new关键字进行开辟内存")]),t._v(" "),a("br"),t._v(" "),a("h1",{attrs:{id:"_3-new操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-new操作符"}},[t._v("#")]),t._v(" 3 new操作符")]),t._v(" "),a("p",[t._v("​\tC++中利用==new==操作符在堆区开辟数据")]),t._v(" "),a("p",[t._v("​\t堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 ==delete==")]),t._v(" "),a("p",[t._v("​\t语法："),a("code",[t._v("new 数据类型")])]),t._v(" "),a("p",[t._v("​\t=利用new创建的数据，会返回该数据对应的类型的指针")]),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"基本语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本语法"}},[t._v("#")]),t._v(" "),a("strong",[t._v("基本语法")])]),t._v(" "),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('int* func()\n{\n\tint* a = new int(10);\n\treturn a;\n}\n\nint main() {\n\n\tint *p = func();\n\n\tcout << *p << endl;\n\tcout << *p << endl;\n\n\t//利用delete释放堆区数据\n\tdelete p;\n\n\t//cout << *p << endl; //报错，释放的空间不可访问\n\n\tsystem("pause");\n\n\treturn 0;\n}\n')])])]),a("br"),t._v(" "),a("h2",{attrs:{id:"开辟数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开辟数组"}},[t._v("#")]),t._v(" "),a("strong",[t._v("开辟数组")])]),t._v(" "),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('//堆区开辟数组\nint main() {\n\n\tint* arr = new int[10];\n\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tarr[i] = i + 100;\n\t}\n\n\tfor (int i = 0; i < 10; i++)\n\t{\n\t\tcout << arr[i] << endl;\n\t}\n\t//释放数组 delete 后加 []\n\tdelete[] arr;\n\n\tsystem("pause");\n\n\treturn 0;\n}\n\n')])])])])}),[],!1,null,null,null);n.default=s.exports}}]);